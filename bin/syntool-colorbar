#!/usr/bin/env python
# coding: utf-8

"""
Copyright (C) 2014-2018 OceanDataLab

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import os
import json
import logging
import argparse

from syntool_converter.utils.colorbar import create_colorbar_image, CONVERT_METHODS
from syntool_converter.utils.syntoolformat import CMAPS

logger = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setLevel(logging.INFO)
logger.addHandler(handler)
logger.setLevel(logging.INFO)

liblogger = logging.getLogger('syntool_converter')
handler = logging.StreamHandler()
handler.setLevel(logging.INFO)
liblogger.addHandler(handler)
liblogger.setLevel(logging.INFO)

if __name__ == "__main__":
    descr = 'Create a colorbar image for a product in Syntool.'
    parser = argparse.ArgumentParser(description=descr)
    parser.add_argument( '-o', '--output', default='/tmp'
                       , help='output directory')

    # Either a single product (parameters given on command line) 
    # or several (config file)
    group = parser.add_mutually_exclusive_group()
    group.add_argument( '-c', '--config', required=False
                      , help='list of product configs')
    group.add_argument( '-p', '--product', required=False
                      , help='product id')

    # Single product options
    parser.add_argument( '--min', type=float, default=0.0
                       , help='minimum value of the color bar')
    parser.add_argument( '--max', type=float, default=1.0
                       , help='maximum value of the color bar')
    parser.add_argument( '-v', '--variable', default="wind speed"
                       , help='variable name')
    parser.add_argument( '-u', '--units', default="knots"
                       , help='units')
    parser.add_argument( '-t', '--transform', default='identity'
                       , choices=CONVERT_METHODS.keys()
                       , help='Conversion method applied to min/max.')
    parser.add_argument( '-m', '--map', default='noaa_wind'
                       , choices=CMAPS
                       , help='Color map to use.')
    parser.add_argument( '--nbins', type=int, default=None
                       , help='Max number of bins in colorbar.')
    parser.add_argument('--relative', action='store_true'
                        , help='Enable a relative colorbar, ie values are '\
                        'ignored and "min" and "max" labels are displayed.')
    parser.add_argument('--discrete', action='store_true'
                        , help='Plot a discret colorbar.')
    parser.add_argument( '--bounds', nargs='+',type=float, default=None
                       , help='Bounds to plot discretized colorbar')

    args = parser.parse_args()

    output_dir = args.output
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    product_configs = []
    if args.product:
        product_config = {
            "product": unicode(args.product, 'utf-8'),
            "min": args.min,
            "max": args.max,
            "variable": unicode(args.variable, 'utf-8'),
            "units": unicode(args.units, 'utf-8'),
            "colorbar": unicode(args.map, 'utf-8'),
            "convert": unicode(args.transform, 'utf-8'),
            "nbins": args.nbins,
            "relative": args.relative,
            "discrete": args.discrete,
            "bounds": list(args.bounds)
        }

        product_configs.append(product_config)
    elif args.config:
        with open(args.config) as data_file:
            product_configs = json.load(data_file)

    for product_config in product_configs:
        create_colorbar_image(output_dir, product_config)


